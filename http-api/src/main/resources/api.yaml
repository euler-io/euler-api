openapi: 3.0.0
info:
  version: 0.1.0-SNAPSHOT
  title: Euler API
  description: HTTP API for the Euler File Processing API.
  license:
    name: GNU Lesser General Public License v3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.en.html
components:
  securitySchemes:
    euler-auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    SortBy:
      type: string
      default: CREATION_DATE
      enum:
        - CREATION_DATE
        - ENQUEUED_DATE
        - START_DATE
        - END_DATE
    SortDirection:
      type: string
      default: ASC
      enum:
        - ASC
        - DESC
    JobStatus:
      type: string
      enum:
        - NEW
        - ENQUEUED
        - RUNNING
        - ERROR
        - CANCELLING
        - CANCELLED
        - FINISHED
    Job:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/JobStatus'
        creation-date:
          type: string
          format: date-time
        enqueued-date:
          type: string
          format: date-time
        start-date:
          type: string
          format: date-time
        end-date:
          type: string
          format: date-time
    JobList:
      type: object
      properties:
        total:
          type: integer
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    JobStatistics:
      type: object
      properties:
        items-found:
          type: integer
        items-processed:
          type: integer
        timestamp:
          type: string
          format: date-time
    JobConfig:
      type: object
      properties:
        config:
          title: The job json configuration.
          type: object
        seed:
          title: The job seed uri.
          type: string
      required:
        - config
        - seed
    JobDetails:
      allOf:
        - $ref: '#/components/schemas/Job'
        - $ref: '#/components/schemas/JobConfig'
      
paths:
  /auth:
    post:
      summary: Generate a JWT Token.
      operationId: authenticate
      security: []
      parameters:
        - name: username
          in: query
          required: true
          description: The username.
          schema:
            default: 0
            type: string
        - name: password
          in: query
          required: true
          description: The password.
          schema:
            default: 0
            type: string
      responses:
        '200':
          description: The JWT token.
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '401':
          description: Username or password incorrect.
  /jobs:
    get:
      summary: Get a list of jobs.
      operationId: list-jobs
      security:
        - euler-auth:
            - euler-admin
      parameters:
        - name: page
          in: query
          required: false
          description: The page number.
          schema:
            default: 0
            type: integer
        - name: size
          in: query
          required: false
          description: The page size.
          schema:
            default: 10
            maximum: 1000
            type: integer
        - name: sort-by
          in: query
          required: false
          description: The field to sort by.
          schema:
            $ref: '#/components/schemas/SortBy'
        - name: sort-direction
          in: query
          required: false
          description: The direction of the sorting.
          schema:
            $ref: '#/components/schemas/SortDirection'
        - name: status
          in: query
          required: false
          description: The status to be used as filter.
          schema:
            $ref: '#/components/schemas/JobStatus'
      responses:
        '200':
          description: A JSON array of jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobList'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /job:
    put:
      summary: Create a new job.
      operationId: create-new-job
      requestBody:
        description: The JSON describing the job.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobConfig'
      parameters:
        - name: enqueue
          in: query
          required: false
          description: If the job must be automatically enqueued.
          schema:
            type: boolean
            default: false
      security:
        - euler-auth:
            - euler-admin
      responses:
        '200':
          description: A JSON of the new job.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Job'
        '400':
          description: Error creating the job.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  '/job/{job-id}':
    get:
      summary: Get the details of the job.
      operationId: get-jobs-details
      security:
        - euler-auth:
            - euler-admin
      parameters:
        - name: job-id
          in: path
          required: true
          description: The job id.
          schema:
            type: string
      responses:
        '200':
          description: A JSON of the job details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobDetails'
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Enqueue a new job for execution
      operationId: enqueue-job
      security:
        - euler-auth:
            - euler-admin
      parameters:
        - name: job-id
          in: path
          required: true
          description: The job id.
          schema:
            type: string
      responses:
        '200':
          description: HTTP status code of the current operation.
        '400':
          description: When the job can't be enqueued for execution.
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Cancel the job execution.
      operationId: cancel-job
      security:
        - euler-auth:
            - euler-admin
      parameters:
        - name: job-id
          in: path
          required: true
          description: The job id.
          schema:
            type: string
      responses:
        '200':
          description: HTTP status code of the current operation.
        '400':
          description: When the job can't be cancelled.
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  '/statistics/{job-id}':
    get:
      summary: Get a list of statistics about the job.
      operationId: get-jobs-statistics
      security:
        - euler-auth:
            - euler-admin
      parameters:
        - name: job-id
          in: path
          required: true
          description: The job id.
          schema:
            type: string
      responses:
        '200':
          description: A JSON of the job details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobStatistics'
        '404':
          description: Job not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'